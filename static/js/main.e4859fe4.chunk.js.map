{"version":3,"sources":["navigation/navbar.js","App.js","serviceWorker.js","index.js"],"names":["renderBody","element","navBody","document","getElementById","gsap","isTweening","animation","TimelineLite","onComplete","pause","progress","style","Animation","to","rotationZ","rotationY","rotationX","ReactDom","render","play","home","className","page4","page5","Navbar","location","src","mia","body","React","Component","NavButton","handleClick","event","querySelectorAll","forEach","x","classList","remove","target","add","props","onClick","this","children","Iframe","title","frameBorder","allow","allowFullScreen","App","id","Boolean","window","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAgBA,SAASA,EAAWC,GAChB,IAAMC,EAAUC,SAASC,eAAe,WACrCC,IAAKC,WAAWJ,IAZvB,WACI,IAAMA,EAAUC,SAASC,eAAe,WAClCG,EAAY,IAAIC,IAAa,CAACC,WAAY,WAC5CF,EAAUG,QACVH,EAAUI,SAAS,GACnBT,EAAQU,MAAQ,MAEpB,OAAOL,EAMSM,GAKXC,GAAGZ,EAAS,EAAG,CAACa,UAAW,IAAKC,UAAW,MAC3CF,GAAGZ,EAAS,GAAK,CAACe,UAAW,GAAIR,WAAY,kBAAMS,IAASC,OAAOlB,EAASC,MAC5EY,GAAGZ,EAAS,GAAK,CAACe,UAAW,MAC7BG,OAGT,IAGMC,EAAO,yBAAKC,UAAU,mBAAf,UACPC,EAAQ,yBAAKD,UAAU,uBACvBE,EAAQ,yBAAKF,UAAU,YAEvBG,E,uKAEA,IAAMC,EAAW,kBAAC,EAAD,CAAQC,IATT,qTAUVC,EAAM,kBAAC,EAAD,CAAQD,IATT,gEAUX,OACE,yBAAKL,UAAU,UACX,kBAAC,EAAD,CAAWO,KAAMR,GAAjB,UACA,kBAAC,EAAD,CAAWQ,KAAMH,GAAjB,cACA,kBAAC,EAAD,CAAWG,KAAMD,GAAjB,WACA,kBAAC,EAAD,CAAWC,KAAMN,GAAjB,UACA,kBAAC,EAAD,CAAWM,KAAML,GAAjB,c,0CAMJxB,EAAWqB,O,GAhBES,IAAMC,WAoBrBC,E,4MASFC,YAAc,SAAAC,GACV/B,SAASgC,iBAAiB,uBAAuBC,SAAQ,SAAAC,GAAC,OAAIA,EAAEC,UAAUC,OAAO,eACjFL,EAAMM,OAAOF,UAAUG,IAAI,YAC3BzC,EAAW,EAAK0C,MAAMb,O,uDAVtB,OACI,0BAAMP,UAAU,YAAYqB,QAASC,KAAKX,aACrCW,KAAKF,MAAMG,c,GAJJf,IAAMC,WAgBfN,I,UC5DTqB,E,uKAEF,OACE,4BAAQC,MAAM,QACNpB,IAAKiB,KAAKF,MAAMf,IAChBqB,YAAY,IACZC,MAAM,0EACNC,iBAAe,Q,GAPRpB,IAAMC,WAaZoB,EAtBf,WACE,OACE,yBAAKC,GAAG,MAAM9B,UAAU,OACtB,kBAAC,EAAD,MACA,yBAAK8B,GAAG,cCIMC,QACW,cAA7BC,OAAO5B,SAAS6B,UAEe,UAA7BD,OAAO5B,SAAS6B,UAEhBD,OAAO5B,SAAS6B,SAASC,MACvB,2DCZNC,IAAStC,OACP,kBAAC,IAAMuC,WAAP,KACE,kBAAC,EAAD,OAEFvD,SAASC,eAAe,SDyHpB,kBAAmBuD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e4859fe4.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDom from 'react-dom';\nimport { gsap, TimelineLite } from 'gsap/all';\nimport { Iframe } from '../App'\nimport './navbar.css';\n\nfunction Animation() {\n    const navBody = document.getElementById(\"navBody\");\n    const animation = new TimelineLite({onComplete: () => {\n        animation.pause();\n        animation.progress(0);\n        navBody.style = \"\";\n    }});\n    return animation;\n}\n\nfunction renderBody(element) {\n    const navBody = document.getElementById(\"navBody\");\n    if(gsap.isTweening(navBody)) return;\n    let animation = Animation();\n    animation\n        // .to(navBody, 0.3, {x: -2000, opacity: 0})\n        // .to(navBody, 0, {x: 2000, onComplete: () => ReactDom.render(element, navBody)})\n        // .to(navBody, 0.4, {x: 0, opacity: 1, ease: \"elastic.out(.75, 1)\"})\n        .to(navBody, 0, {rotationZ: 180, rotationY: 180})\n        .to(navBody, 0.2, {rotationX: 90, onComplete: () => ReactDom.render(element, navBody)})\n        .to(navBody, 0.2, {rotationX: 180})\n        .play();\n}\n\nconst googleMapsUrl = \"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3471.7839936992755!2d-98.55656528450163!3d29.52265478207502!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x865c60a37282e1f1%3A0x37cdd47cd27f5da3!2s8511%20Rockmoor%2C%20San%20Antonio%2C%20TX%2078230!5e0!3m2!1sen!2sus!4v1587334744014!5m2!1sen!2sus\";\nconst lateJuly = \"https://www.youtube.com/embed/DR6TtBmJ-CE?autoplay=1&mute=1\";\n\nconst home = <div className=\"NavBody bgGreen\"> Home </div>;\nconst page4 = <div className=\"NavBody bgSawtooth\"></div>;\nconst page5 = <div className=\"NavBody\"></div>;\n\nclass Navbar extends React.Component {\n    render() {\n      const location = <Iframe src={googleMapsUrl}></Iframe>\n      const mia = <Iframe src={lateJuly}></Iframe>\n      return (\n        <div className=\"navbar\">\n            <NavButton body={home}> Home </NavButton>\n            <NavButton body={location}> Location </NavButton>\n            <NavButton body={mia}> Video </NavButton>\n            <NavButton body={page4}> Trip </NavButton>\n            <NavButton body={page5}> Ballz </NavButton>\n        </div>\n      );\n    }\n\n    componentDidMount() {\n        renderBody(home)\n    }\n}\n\nclass NavButton extends React.Component {\n    render() {\n        return (\n            <span className=\"NavButton\" onClick={this.handleClick}>\n                {this.props.children}\n            </span>\n        )\n    }\n\n    handleClick = event => {\n        document.querySelectorAll('.NavButton.selected').forEach(x => x.classList.remove('selected'));\n        event.target.classList.add('selected');\n        renderBody(this.props.body);\n    }\n}\n\nexport default Navbar;","import React from 'react';\nimport Navbar from './navigation/navbar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div id=\"app\" className=\"App\">\n      <Navbar></Navbar>\n      <div id=\"navBody\"></div>\n    </div>\n  );\n}\n\nclass Iframe extends React.Component {\n  render() {\n    return (\n      <iframe title=\"frame\"\n              src={this.props.src}\n              frameBorder=\"0\" \n              allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n              allowFullScreen>\n     </iframe>\n    )\n  }\n}\n\nexport default App;\nexport {Iframe};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}